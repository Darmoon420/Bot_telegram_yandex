from telegram.ext import Updater, MessageHandler, Filters
from telegram.ext import CommandHandler, CallbackQueryHandler, CallbackContext
from TOKEN import TOKEN
from time import asctime
from telegram import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, Update
from random import randint
from telegram import Bot
import sqlite3
import wikipedia
import requests
import math

bot = Bot(TOKEN)

keyboard_start = [[
        InlineKeyboardButton("–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", callback_data='–í—Ä–µ–º—è'),
        InlineKeyboardButton("–î–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", callback_data='–î–∞—Ç–∞'),
        InlineKeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data='–¶–µ–Ω—ã')]]

keyboard_game = [[
        InlineKeyboardButton("üóø", callback_data='–∫–∞–º–µ–Ω—å'),
        InlineKeyboardButton("‚úÇ", callback_data='–Ω–æ–∂–Ω–∏—Ü—ã'),
        InlineKeyboardButton("üìÉ", callback_data='–±—É–º–∞–≥—É')]]

keyboard_new_game = [[
        InlineKeyboardButton("–î–∞", callback_data='new_game'),
        InlineKeyboardButton("–ù–µ—Ç", callback_data='stop_game')]]

reply_markup_buttons_start = InlineKeyboardMarkup(keyboard_start)
reply_markup = InlineKeyboardMarkup(keyboard_game)
reply_markup_new_game = InlineKeyboardMarkup(keyboard_new_game)

con = sqlite3.connect("User.db", check_same_thread=False)
cur = con.cursor()
cur.execute(f"""CREATE TABLE IF NOT EXISTS data (
    id,
    text
);
""")

cur.execute(f"""CREATE TABLE IF NOT EXISTS Users (
    chat_id  UNIQUE,
    city
);
""")

con.commit()


def help(update, context):
    update.message.reply_text(
        f"\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        f"\n/time - –≤—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        f"\n/date - –≤—ã–≤–æ–¥–∏—Ç –¥–∞—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        f"\n/wikipedia - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:  /wikipedia <–∑–∞–ø—Ä–æ—Å>"
        f"\n/weather - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥—Ä–æ–¥–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather <–ì–æ—Ä–æ–¥>"
        f"\n/set_timer - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <—Å–µ–∫—É–Ω–¥>"
        f"\n/unset - —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—â–∏–π —Ç–∞–º–µ—Ä"
        f"\n/new_task -  –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new_task <–∑–∞–¥–∞—á–∞>"
        f"\n/tasks - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
        f"\n/clear_tasks - —É–¥–∞–ª—è—é—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"
        f"\n/prices - –≤—ã–≤–æ–¥–∏—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç"
        f"\n/game - –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±–∞–º–∞–≥–∞"
        f"\n/uravnenie - –≤—ã–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /uravnenie <a b c>"
        f"\n/gipotenusa - –≤—ã–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gipotenusa <a c>", reply_markup=reply_markup_buttons_start
    )


def deskriminant(update, context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç.
    """
    if len(context.args) == 3:
        a = int(context.args[0])
        b = int(context.args[1])
        c = int(context.args[2])
        discr = b ** 2 - 4 * a * c

        if discr > 0:
            x1 = (-b + math.sqrt(discr)) / (2 * a)
            x2 = (-b - math.sqrt(discr)) / (2 * a)
            update.message.reply_text("x1 = %.2f \nx2 = %.2f" % (x1, x2))

        elif discr == 0:
            x = -b / (2 * a)
            update.message.reply_text("x = %.2f" % x)

        else:
            update.message.reply_text("–ö–æ—Ä–Ω–µ–π –Ω–µ—Ç")

    else:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 3 —á–∏—Å–ª–∞")
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /uravnenie <a b c>")


def gipotenusa(update, context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç.
    """
    if len(context.args) == 2 and int(context.args[0]) > 0 and int(context.args[1]) > 0:
        a = int(context.args[0])
        b = int(context.args[1])
        gipot = (a**2 + b**2)**0.5
        update.message.reply_text("–ì–∏–ø–æ—Ç–µ–Ω—É–∑–∞ = " + str(gipot))

    else:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 2 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞")
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gipotenusa <a c>")


def prices(update, context):
    """
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Ü–µ–Ω–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json.
    """
    from_currency = "USD"
    to_currency = "RUB"

    from_currency_2 = "EUR"
    from_currency_3 = "GBP"

    api_key = "0ZPZD95M4QHYWI0X"
    base_url = r"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE"

    # main_url –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª–Ω—ã–π URL
    main_url = base_url + "&from_currency=" + from_currency +\
               "&to_currency=" + to_currency + "&apikey=" + api_key

    main_url_2 = base_url + "&from_currency=" + from_currency_2 +\
               "&to_currency=" + to_currency + "&apikey=" + api_key

    main_url_3 = base_url + "&from_currency=" + from_currency_3 + \
                 "&to_currency=" + to_currency + "&apikey=" + api_key
    req_ob = requests.get(main_url)
    req_ob_2 = requests.get(main_url_2)
    req_ob_3 = requests.get(main_url_3)

    # –º–µ—Ç–æ–¥ json –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç json
    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
    result = req_ob.json()
    result_2 = req_ob_2.json()
    result_3 = req_ob_3.json()

    update.message.reply_text(f"{from_currency}/{to_currency} "
                              f"{result['Realtime Currency Exchange Rate']['5. Exchange Rate']}" +
                              f"\n {from_currency_2}/{to_currency} "
                              f"{result_2['Realtime Currency Exchange Rate']['5. Exchange Rate']}" +
                              f"\n {from_currency_3}/{to_currency} "
                              f"{result_3['Realtime Currency Exchange Rate']['5. Exchange Rate']}")


def weather(update, context):
    """
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≥–æ–¥–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ json.
    """
    if context.args:
        city_name = ' '.join(context.args)
        cur.execute(f"UPDATE Users SET city = '{city_name}' WHERE chat_id = {update.message.chat_id}")
        con.commit()

    else:
        city_name = str(*(cur.execute(f"""SELECT city FROM Users WHERE chat_id = {update.message.chat_id}""").fetchone()))
    api_key = "cf8bf4912837247254a806184dc1c553"
    base_url = "http://api.openweathermap.org/data/2.5/weather?"
    complete_url = base_url + "appid=" + api_key + "&q=" + city_name
    response = requests.get(complete_url)
    data = response.json()

    if data["cod"] != "404":
        tmp_data = data["main"]
        current_temperature = tmp_data["temp"]
        current_temperature_2 = tmp_data["feels_like"]
        current_pressure = tmp_data["pressure"]
        current_humidiy = tmp_data["humidity"]
        data_2 = data["weather"]
        weather_description = data_2[0]["description"]
        wind = data['wind']['speed']
        update.message.reply_text("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö): " +
              str(int(current_temperature) - 273) +
              "\n –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö): " +
              str(int(current_temperature_2) - 273) +
              "\n –í–µ—Ç–µ—Ä: " +
              str(wind) + ' –º/—Å' +
              "\n –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –≥–ü–∞): " +
              str(current_pressure) +
              "\n –í–ª–∞–∂–Ω–æ—Å—Ç—å (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö): " +
              str(current_humidiy) +
              "\n –û–ø–∏—Å–∞–Ω–∏–µ: " +
              str(weather_description))

    else:
        update.message.reply_text(" –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        update.message.reply_text(" –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather <–ì–æ—Ä–æ–¥>")


def get_price():
    from_currency = "USD"
    to_currency = "RUB"

    from_currency_2 = "EUR"
    from_currency_3 = "GBP"

    api_key = "0ZPZD95M4QHYWI0X"
    base_url = r"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE"

    # main_url –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª–Ω—ã–π URL
    main_url = base_url + "&from_currency=" + from_currency + \
               "&to_currency=" + to_currency + "&apikey=" + api_key

    main_url_2 = base_url + "&from_currency=" + from_currency_2 + \
                 "&to_currency=" + to_currency + "&apikey=" + api_key

    main_url_3 = base_url + "&from_currency=" + from_currency_3 + \
                 "&to_currency=" + to_currency + "&apikey=" + api_key
    req_ob = requests.get(main_url)
    req_ob_2 = requests.get(main_url_2)
    req_ob_3 = requests.get(main_url_3)

    # –º–µ—Ç–æ–¥ json –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç json
    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
    result = req_ob.json()
    result_2 = req_ob_2.json()
    result_3 = req_ob_3.json()

    return (f"{from_currency}/{to_currency} "
                              f"{result['Realtime Currency Exchange Rate']['5. Exchange Rate']}" +
                              f"\n {from_currency_2}/{to_currency} "
                              f"{result_2['Realtime Currency Exchange Rate']['5. Exchange Rate']}" +
                              f"\n {from_currency_3}/{to_currency} "
                              f"{result_3['Realtime Currency Exchange Rate']['5. Exchange Rate']}")

def game(update, context):
    """
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–æ–π.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è button
    """
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É', reply_markup=reply_markup)


def button(update: Update, _: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç callback_data —Ñ—É–Ω–∫—Ü–∏–∏ game
    """
    lst = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥—É']
    bot_choice = randint(0, 2)
    query = update.callback_query
    query.answer()

    if query.data == '–∫–∞–º–µ–Ω—å' or query.data == '–±—É–º–∞–≥—É' or query.data == '–Ω–æ–∂–Ω–∏—Ü—ã':

        if lst.index(query.data) == bot_choice:
            query.edit_message_text(text='–Ø —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –Ω–∏—á—å—è. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

        elif query.data == '–∫–∞–º–µ–Ω—å' and lst[bot_choice] == '–Ω–æ–∂–Ω–∏—Ü—ã':
            query.edit_message_text(text='–Ø –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

        elif query.data == '–Ω–æ–∂–Ω–∏—Ü—ã' and lst[bot_choice] == '–±—É–º–∞–≥—É':
            query.edit_message_text(text='–Ø –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

        elif query.data == '–±—É–º–∞–≥—É' and lst[bot_choice] == '–∫–∞–º–µ–Ω—å':
            query.edit_message_text(text='–Ø –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

        elif query.data == '–∫–∞–º–µ–Ω—å' and lst[bot_choice] == '–±—É–º–∞–≥—É':
            query.edit_message_text(text='–Ø –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

        elif query.data == '–±—É–º–∞–≥—É' and lst[bot_choice] == '–Ω–æ–∂–Ω–∏—Ü—ã':
            query.edit_message_text(text='–Ø –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

        elif query.data == '–Ω–æ–∂–Ω–∏—Ü—ã' and lst[bot_choice] == '–∫–∞–º–µ–Ω—å':
            query.edit_message_text(text='–Ø –≤—ã–±—Ä–∞–ª ' + lst[bot_choice] + ', –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                    reply_markup=reply_markup_new_game)

    if query.data == 'new_game':
        query.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É', reply_markup=reply_markup)

    if query.data == 'stop_game':
        query.edit_message_text(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É')

    if query.data == '–¶–µ–Ω—ã':
        bot.send_message(query.from_user.id, get_price())

    if query.data == '–í—Ä–µ–º—è':
        bot.send_message(query.from_user.id, get_time())

    if query.data == '–î–∞—Ç–∞':
        bot.send_message(query.from_user.id, get_date())


def wiki(update, context):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏
    """
    if context.args:
        update.message.reply_text(wikipedia.summary(' '.join(context.args)))

    else:
        update.message.reply_text("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:  /wikipedia <–∑–∞–ø—Ä–æ—Å>")


def time(update, context):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    update.message.reply_text(asctime().split()[3])


def get_time():
    return asctime().split()[3]


def date(update, context):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    tmp = asctime().split()
    update.message.reply_text(f'{tmp[0]} {tmp[1]} {tmp[2]} {tmp[4]}')


def get_date():
    tmp = asctime().split()
    return f'{tmp[0]} {tmp[1]} {tmp[2]} {tmp[4]}'


def set_timer(update, context):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–π–º–µ—Ä
    """
    chat_id = update.message.chat_id

    try:
        # args[0] –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–µ—Ä–∞)
        due = int(context.args[0])
        if due < 0:
            update.message.reply_text(
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–º–µ–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ')
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        # –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
        if 'job' in context.chat_data:
            job = context.chat_data['job']
            try:
                job.schedule_removal()
            except BaseException:
                pass

        new_job = context.job_queue.run_once(task, due, context=chat_id)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞.
        context.chat_data['job'] = new_job
        # –ü—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å.
        update.message.reply_text(f'–Ø –∑–∞—Å–µ–∫ {due} —Å–µ–∫—É–Ω–¥')

    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <—Å–µ–∫—É–Ω–¥>')


def set_city(update, context):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    if str(cur.execute(f"""SELECT city FROM Users WHERE chat_id = {update.message.chat_id}""").fetchone()) == '(None,)':
        cur.execute(f"UPDATE Users SET city = '{update.message.text}' WHERE chat_id = {update.message.chat_id}")
        con.commit()
        print(update.message.text)


def task(context):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω–∞—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞.
    """
    job = context.job
    context.bot.send_message(job.context, text='–í—Ä–µ–º—è –≤—ã—à–ª–æ!')


def unset_timer(update, context):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—Ç–∞–≤–∏–ª–∞—Å—å
    if 'job' not in context.chat_data:
        update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞')
        return

    job = context.chat_data['job']
    # –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)
    job.schedule_removal()

    # –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    del context.chat_data['job']
    update.message.reply_text('–û—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞–π–º–µ—Ä!')


def start(update, context):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    update.message.reply_text(
        "–Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫. –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –Ω—É–∂–Ω–∞?" +
        f"\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        f"\n/time"
        f"\n/date"
        f"\n/wikipedia"
        f"\n/weather"
        f"\n/set_timer"
        f"\n/unset"
        f"\n/new_task"
        f"\n/tasks"
        f"\n/clear_tasks"
        f"\n/prices"
        f"\n/game"
        f"\n/uravnenie"
        f"\n/gipotenusa"
    )

    update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥")
    text_handler = MessageHandler(Filters.text, set_city)
    print(text_handler)

    cur.execute(f"INSERT INTO Users(chat_id) VALUES({update.message.chat_id})")
    con.commit()


def close_keyboard(update, context):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—Ç–∏—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    update.message.reply_text(
        "Ok",
        reply_markup=ReplyKeyboardRemove()
    )


def new_task(update, context):
    if context.args:
        cur.execute(f"INSERT INTO data(id, text) VALUES({update.message.chat_id}, '{' '.join(context.args[0:])}')")
        con.commit()

        update.message.reply_text(f'–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫')

    else:
        update.message.reply_text(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new_task <–∑–∞–¥–∞—á–∞>')


def clear_tasks(update, context):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–º
    """
    cur.execute(f"DELETE from data WHERE id = {update.message.chat_id}")
    con.commit()

    update.message.reply_text(f'–í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã')


def tasks(update, context):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    result = cur.execute(f"""SELECT text FROM data
                WHERE id = {update.message.chat_id}""").fetchall()

    if not result:
        update.message.reply_text(f'–ù–µ—Ç –ø–ª–∞–Ω–æ–≤')

    for i in range(len(result)):
        update.message.reply_text(f'{i + 1} {result[i][0]}')


def main():
    """
    –û—Å–Ω–æ–≤–∞–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç updater. 
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    dp.add_handler(CommandHandler(["set", "set_timer"], set_timer,
                                  pass_args=True,
                                  pass_job_queue=True,
                                  pass_chat_data=True)
                   )

    dp.add_handler(CommandHandler("unset", unset_timer,
                                  pass_chat_data=True)
                   )

    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(CommandHandler("time", time))
    dp.add_handler(CommandHandler("clear_tasks", clear_tasks))
    dp.add_handler(CommandHandler("game", game))
    dp.add_handler(CommandHandler("new_task", new_task))
    dp.add_handler(CommandHandler("tasks", tasks))
    dp.add_handler(CommandHandler("date", date))
    dp.add_handler(CommandHandler("close", close_keyboard))
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("wikipedia", wiki))
    dp.add_handler(CommandHandler("weather", weather))
    dp.add_handler(CommandHandler("prices", prices))
    dp.add_handler(CommandHandler("uravnenie", deskriminant))
    dp.add_handler(CommandHandler("gipotenusa", gipotenusa))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(MessageHandler(Filters.text, set_city))
    updater.start_polling()

    updater.idle()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
